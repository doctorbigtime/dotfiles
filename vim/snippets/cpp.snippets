# main()
snippet main
	auto main(int argc, char**argv) -> int
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:iostream}>${2}
snippet incb
	#include <boost/${1:range/adaptor/map.hpp}>${2}
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# testing
snippet testfile
	#include <gtest/gtest.h>
	#include <gtest/gmock.h>

	using ::testing::_;
	using ::testing::Return;
	using ::testing::ReturnRef;
	using ::testing::Invoke;
	using ::testing::InvokeWithoutArgs;
	using ::testing::Eq;
	using ::testing::Ref;
	using ::testing::NiceMock;
	using ::testing::StrictMock;

	TEST(${1:test_thing}, ${2:thing})
	{
	}
# common stl containers
snippet map
	std::map<${1:key}, ${2:value}> ${3};
snippet umap
	std::unordered_map<${1:key}, ${2:value}> ${3};
snippet pq
	std::priority_queue<${1:thing}, std::vector<${1}>, ${2:comparator}> ${3};
snippet set
	std::set<${1:std::string}> ${2};
snippet vec
	std::vector<${1:std::string}> ${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
	${2}
	} // namespace $1
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
# Templates
snippet te
	template <typename ${1}> ${2}
snippet tes
	template <typename ${1:T}>
	struct ${2:name}
	{
	};
snippet tp
	typename ${1}
snippet us
	using ${1:my_type_t} = ${2:int};
# Access
snippet pub
	public:
snippet pri
	private:
snippet pro
	protected:
# Casts
snippet dca
	dynamic_cast<${1:To}>(${2:expr})${3}
snippet sca
	static_cast<${1:To}>(${2:expr})${3}
snippet cca
	const_cast<${1:To}>(${2:expr})${3}
snippet rca
	reinterpret_cast<${1:To}>(${2:expr})${3}
snippet duca
	std::chrono::duration_cast<std::chrono::${1:nanoseconds}>(${2:src})
# Iteration
snippet fori
	for(auto ${2:i} = 0u; $2 < ${1:count}; $2${3:++})
	{
		${4}
	}
snippet forr
	for(${1:auto} ${2:const&} ${3:obj} : ${4:range})
	{
		${5:// code}
	}
snippet fore
	std::for_each(${1:begin}, ${2:end}, ${3:lambda});
# lambdas
snippet ld
	[${1:capture}](${2:args}){${3:code}};
# declarations/misc
snippet chr
	std::chrono${1}
snippet func
	std::function<${1:proto}>
snippet au
	auto ${1:var}
snippet k
	const${1}
snippet str
	std::string ${1:var}
snippet cout
	std::cout << ${1} << std::endl;
snippet endl
	std::endl
snippet pb
	push_back(${1:args})
snippet eb
	emplace_back(${1:args})
snippet ins
	insert(${1:args})
snippet era
	erase(${1:args})
snippet ite
	iterator${1}
snippet cit
	const_iterator${1}
snippet lit
	using namespace std::chrono_literals;
	using namespace std::literals::string_literals;
snippet bins
	std::back_inserter(${1:thing})
snippet oss
	std::ostringstream ${1:oss}
snippet throw
	throw ${1:std::logic_error}("${2:msg}");
snippet printer
	std::basic_ostream<T>& operator<<(std::basic_ostream<T>& os, ${1:thing} const& obj)
	{
		return os << ${2:obj};
	}
