# main()
snippet main
	auto main(int argc, char**argv) -> int
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:iostream}>${2}
# range for
snippet forr
	for(${1} : ${2})
	{
		${3:// code}
	}
# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
	${2}
	} // namespace ${1}
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3}
	};
snippet te
	template <typename ${1}> ${2}
snippet tp
	typename ${1}
snippet au
	auto ${1:var}
snippet us
	using ${1:my_type_t} = ${2:int};
snippet str
	std::string ${1:var}
snippet cout
	std::cout << ${1} << std::endl;
snippet endl
	std::endl
snippet shar
	std::shared_ptr<${1:Type}> ${2:name}
snippet uni
	std::unique_ptr<${1:Type}> ${2:name}
snippet mks
	std::make_shared<${1:Type}>(${2:args})
snippet push
	push_back(${1:args})
snippet empl
	emplace_back(${1:args})
snippet ins
	insert(${1:args})
snippet era
	erase(${1:args})
